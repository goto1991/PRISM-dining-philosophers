// randomized dining philosophers [LR81]
// five philosophers

mdp

// formulae 
// left fork free (left neighbour is philosopher 2)
formula lfree = (p2>=0 & p2<=4) | p2=6 | p2=10;

// right fork free (left neighbour is philosopher 3)
formula rfree = (p3>=0 & p3<=3) | p3=5 | p3=7 | p3=11;

// right fork free (left neighbour is philosopher 4)
//formula rfree = (p4>=0 & p4<=3) | p4=5 | p4=7 | p4=11;

// right fork free (left neighbour is philosopher 5)
//formula rfree = (p5>=0 & p5<=3) | p5=5 | p5=7 | p5=11;

const int NEUTRAL=0;
const int LEFT=1;
const int RIGHT=2;

global fork1_last: [0..2] init 0;
global fork2_last: [0..2] init 0;
global fork3_last: [0..2] init 0;

module phil1

	p1: [0..11];
	left_signal1: [0..1] init 0;
	right_signal1: [0..1] init 0;

	[] p1=0 -> (p1'=1) & (left_signal1'=1) & (right_signal1'=1); // trying
	[] p1=1 -> 0.5 : (p1'=2) + 0.5 : (p1'=3); // draw randomly
	[] p1=2 &  lfree & ((right_signal2=0)|(fork1_last=NEUTRAL)|(fork1_last=LEFT)) -> (p1'=4); // pick up left
	[] p1=3 &  rfree & ((left_signal3=0)|(fork3_last=NEUTRAL)|(fork3_last=RIGHT)) -> (p1'=5); // pick up right
	[] p1=4 &  rfree -> (p1'=8); // pick up right (got left)
	[] p1=4 & !rfree -> (p1'=6); // right not free (got left)
	[] p1=5 &  lfree -> (p1'=8); // pick up left (got right)
	[] p1=5 & !lfree -> (p1'=7); // left not free (got right)
	[] p1=6  -> (p1'=1); // put down left
	[] p1=7  -> (p1'=1); // put down right
	[] p1=8  -> (p1'=9) & (left_signal1'=0) & (right_signal1'=0) & (fork1_last'=RIGHT) & (fork3_last'=LEFT); // move to eating (got forks)
	[] p1=9  -> (p1'=10); // finished eating and put down left 
	[] p1=9  -> (p1'=11); // finished eating and put down right
	[] p1=10 -> (p1'=0); // put down right and return to think
	[] p1=11 -> (p1'=0); // put down left and return to think

endmodule

// construct further modules through renaming (3)
module phil2 = phil1 [ p1=p2, p2=p3, p3=p1, left_signal1=left_signal2, right_signal1=right_signal2, left_signal3=left_signal1, right_signal2=right_signal3, fork1_last=fork2_last, fork3_last=fork1_last ] endmodule
module phil3 = phil1 [ p1=p3, p2=p1, p3=p2, left_signal1=left_signal3, right_signal1=right_signal3, left_signal3=left_signal2, right_signal2=right_signal1, fork1_last=fork3_last, fork3_last=fork2_last ] endmodule


// construct further modules through renaming
//module phil2 = phil1 [ p1=p2, p2=p3, p4=p1, left_signal1=left_signal2, right_signal1=right_signal2 ] endmodule
//module phil3 = phil1 [ p1=p3, p2=p4, p4=p2, left_signal1=left_signal3, right_signal1=right_signal3 ] endmodule
//module phil4 = phil1 [ p1=p4, p2=p1, p4=p3, left_signal1=left_signal4, right_signal1=right_signal4 ] endmodule


// construct further modules through renaming
//module phil2 = phil1 [ p1=p2, p2=p3, p5=p1, left_signal1=left_signal2, right_signal1=right_signal2] endmodule
//module phil3 = phil1 [ p1=p3, p2=p4, p5=p2, left_signal1=left_signal3, right_signal1=right_signal3] endmodule
//module phil4 = phil1 [ p1=p4, p2=p5, p5=p3, left_signal1=left_signal4, right_signal1=right_signal4] endmodule
//module phil5 = phil1 [ p1=p5, p2=p1, p5=p4, left_signal1=left_signal5, right_signal1=right_signal5] endmodule

// labels

// a philosopher is hungry (3)
label "hungry" = ((p1>0)&(p1<8))|((p2>0)&(p2<8))|((p3>0)&(p3<8)); 
// a philosopher is eating (3)
label "eat" = ((p1>=8)&(p1<=9))|((p2>=8)&(p2<=9))|((p3>=8)&(p3<=9));
// all hungry
label "allhungry" = ((p1>0)&(p1<8))&((p2>0)&(p2<8))&((p3>0)&(p3<8)); 

// a philosopher is hungry (4)
//label "hungry" = ((p1>0)&(p1<8))|((p2>0)&(p2<8))|((p3>0)&(p3<8))|((p4>0)&(p4<8)); 
// a philosopher is eating (4)
//label "eat" = ((p1>=8)&(p1<=9))|((p2>=8)&(p2<=9))|((p3>=8)&(p3<=9))|((p4>=8)&(p4<=9));

// a philosopher is hungry (5)
//label "hungry" = ((p1>0)&(p1<8))|((p2>0)&(p2<8))|((p3>0)&(p3<8))|((p4>0)&(p4<8))|((p5>0)&(p5<8)); 
// a philosopher is eating (5)
//label "eat" = ((p1>=8)&(p1<=9))|((p2>=8)&(p2<=9))|((p3>=8)&(p3<=9))|((p4>=8)&(p4<=9))|((p5>=8)&(p5<=9));

// philosopher X is hungry
label "hungry1" = (p1>0)&(p1<8);
label "hungry2" = (p2>0)&(p2<8);
label "hungry3" = (p3>0)&(p3<8);
//label "hungry4" = (p4>0)&(p4<8);
//label "hungry5" = (p5>0)&(p5<8);

// philosopher X is eating
label "eat1" = (p1>=8)&(p1<=9);
label "eat2" = (p2>=8)&(p2<=9);
label "eat3" = (p3>=8)&(p3<=9);
//label "eat4" = (p4>=8)&(p4<=9);
//label "eat5" = (p5>=8)&(p5<=9);

// rewards

rewards "steps"
	true : 1;
endrewards